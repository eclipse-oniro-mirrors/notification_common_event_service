# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/common_event_service/event.gni")
import("//build/test.gni")

module_output_path = "common_event_service/frameworks/core"

config("kits_natvie_config") {
  visibility = [ ":*" ]

  include_dirs = [ "${ffrt_path}/interfaces/kits" ]

  cflags = []

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_unittest("common_event_branch_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${tools_path}/test/mock",
    "${ffrt_path}/interfaces/kits",
  ]

  sources = [
    "${tools_path}/test/mock/mock_common_event_stub.cpp",
    "common_event_branch_test/common_event_branch_test.cpp",
    "common_event_branch_test/mock_service_registry.cpp",
    "common_event_branch_test/mock_want.cpp",
  ]

  configs = [ ":kits_natvie_config" ]

  deps = [
    "${ces_core_path}:cesfwk_core",
    "${services_path}:cesfwk_services",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("common_event_test") {
  module_out_path = module_output_path

  sources = [ "common_event_test.cpp" ]

  configs = [ ":kits_natvie_config" ]

  deps = [ "${ces_core_path}:cesfwk_core" ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ipc:ipc_core",
  ]
}

ohos_unittest("common_event_listener_test") {
  module_out_path = module_output_path

  sources = [ "common_event_listener_test.cpp" ]

  configs = [ ":kits_natvie_config" ]

  deps = [ "${ces_core_path}:cesfwk_core" ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ipc:ipc_core",
  ]
}

ohos_unittest("common_event_stub_test") {
  module_out_path = module_output_path

  sources = [ "common_event_stub_test.cpp" ]

  configs = [ ":kits_natvie_config" ]

  deps = [ "${ces_core_path}:cesfwk_core" ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("common_event_proxy_test") {
  module_out_path = module_output_path

  sources = [ "common_event_proxy_test.cpp" ]

  configs = [ ":kits_natvie_config" ]

  deps = [ "${ces_core_path}:cesfwk_core" ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("event_receive_stub_test") {
  module_out_path = module_output_path

  include_dirs = []

  sources = [ "event_receive_stub_test.cpp" ]

  configs = [ ":kits_natvie_config" ]

  deps = [ "${ces_core_path}:cesfwk_core" ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

group("unittest") {
  testonly = true
  deps = []

  deps += [
    ":common_event_branch_test",
    ":common_event_listener_test",
    ":common_event_proxy_test",
    ":common_event_stub_test",
    ":common_event_test",
    ":event_receive_stub_test",
  ]
}
