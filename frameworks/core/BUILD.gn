# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/common_event_service/event.gni")
import("//build/config/components/idl_tool/idl.gni")

cflags = [
  "-fno-math-errno",
  "-fno-unroll-loops",
  "-fmerge-all-constants",
  "-fno-ident",
  "-Oz",
  "-flto",
  "-ffunction-sections",
  "-fdata-sections",
]

config("cesfwk_core_config") {
  visibility = [ ":*" ]

  include_dirs = []

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

config("event_receive_config") {
  visibility = [ "../*" ]

  include_dirs = [
    "${ces_core_path}/include",
    "${ces_innerkits_path}",
    "${target_gen_dir}",
  ]
}

config("cesfwk_core_public_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${ces_core_path}/include",
    "${ces_innerkits_path}",
    "${ffrt_path}/interfaces/kits",
    "${target_gen_dir}",
  ]
}

idl_gen_interface("event_receive_interface") {
  sources = [ "IEventReceive.idl" ]
  log_domainid = "0xD001202"
  log_tag = "Ces"
  subsystem_name = "notification"
  part_name = "common_event_service"
}

ohos_source_set("event_receive_proxy") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  public_configs = [ ":event_receive_config" ]
  output_values = get_target_outputs(":event_receive_interface")
  sources = filter_include(output_values, [ "*_proxy.cpp" ])
  deps = [ ":event_receive_interface" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
  subsystem_name = "notification"
  part_name = "common_event_service"
}

ohos_source_set("event_receive_stub") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  public_configs = [ ":event_receive_config" ]
  output_values = get_target_outputs(":event_receive_interface")
  sources = filter_include(output_values, [ "*_stub.cpp" ])
  deps = [ ":event_receive_interface" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
  subsystem_name = "notification"
  part_name = "common_event_service"
}

ohos_shared_library("cesfwk_core") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  version_script = "libcesfwk_core.map"

  sources = [
    "${ces_core_path}/src/ces_xcollie.cpp",
    "${ces_core_path}/src/common_event.cpp",
    "${ces_core_path}/src/common_event_death_recipient.cpp",
    "${ces_core_path}/src/common_event_listener.cpp",
    "${ces_core_path}/src/common_event_proxy.cpp",
    "${ces_core_path}/src/common_event_stub.cpp",
    "${ces_native_path}/src/async_common_event_result.cpp",
    "${ces_native_path}/src/common_event_data.cpp",
    "${ces_native_path}/src/common_event_publish_info.cpp",
    "${ces_native_path}/src/common_event_subscribe_info.cpp",
    "${ces_native_path}/src/common_event_subscriber.cpp",
    "${ces_native_path}/src/matching_skills.cpp",
  ]

  configs = [ ":cesfwk_core_config" ]

  public_configs = [ ":cesfwk_core_public_config" ]

  defines = []

  deps = [
    ":event_receive_proxy",
    ":event_receive_stub",
  ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]

  if (ces_hitrace_usage) {
    external_deps += [ "hitrace:hitrace_meter" ]
    defines += [ "HITRACE_METER_ENABLE" ]
  }

  subsystem_name = "notification"
  innerapi_tags = [ "platformsdk" ]
  part_name = "common_event_service"
}
