/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable CommonEventData..OHOS.EventFwk.CommonEventData;
sequenceable CommonEventSubscribeInfo..OHOS.EventFwk.CommonEventSubscribeInfo;
sequenceable CommonEventPublishInfo..OHOS.EventFwk.CommonEventPublishInfo;
sequenceable OHOS.IRemoteObject;
interface OHOS.EventFwk.ICommonEvent {
    int PublishCommonEvent([in] CommonEventData event, [in] CommonEventPublishInfo publishInfo, [in] int userId);
    int PublishCommonEvent([in] CommonEventData event, [in] CommonEventPublishInfo publishInfo,
        [in] IRemoteObject commonEventListener, [in] int userId);

    boolean PublishCommonEvent([in] CommonEventData event, [in] CommonEventPublishInfo publishInfo,
        [in] unsigned int uid, [in] int callerToken, [in] int userId);
    boolean PublishCommonEvent([in] CommonEventData event, [in] CommonEventPublishInfo publishInfo,
        [in] IRemoteObject commonEventListener, [in] unsigned int uid, [in] int callerToken, [in] int userId);

    int SubscribeCommonEvent([in] CommonEventSubscribeInfo subscribeInfo, [in] IRemoteObject commonEventListener, 
        [in] int instanceKey);
    int UnsubscribeCommonEvent([in] IRemoteObject commonEventListener);
    int UnsubscribeCommonEventSync([in] IRemoteObject commonEventListener);
    boolean GetStickyCommonEvent([in] String event, [out] CommonEventData eventData);
    boolean DumpState([in] unsigned char dumpType, [in] String event, [in] int userId, [out] String[] state);
    boolean FinishReceiver([in] IRemoteObject proxy, [in] int code, [in] String receiverData, [in] boolean abortEvent);
    boolean Freeze([in] unsigned int uid);
    boolean Unfreeze([in] unsigned int uid);
    boolean UnfreezeAll();
    int RemoveStickyCommonEvent([in] String event);
    int SetStaticSubscriberState([in] boolean enable);
    int SetStaticSubscriberStateByEvents([in] String[] events, [in] boolean enable);
    boolean SetFreezeStatus([in] Set<int> pidList, [in] boolean isFreeze);
}