/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class Cleaner {
    private ptr: long = 0 

    constructor(ptr:long) {
        this.ptr = ptr
    }
    native clean(): void
}

function callback(cleaner: Cleaner): void {
    cleaner.clean()
}
let destroyRegister = new FinalizationRegistry<Cleaner>(callback)
let unregisterToken = new object()

export interface CommonEventSubscriber {
    getCodeSync(): number;
}

class CommonEventSubscriberInner implements CommonEventSubscriber {
    static {loadLibrary("ani_commoneventmanager.z")}
    private subscriberInstanceWrapper: long = 0;
    
    public getCodeSync(): number {
        return 2;
    }

    private cleaner: Cleaner | null = null;
    
    constructor(wrapper:long) {
        if(this.subscriberInstanceWrapper == 0){
            this.subscriberInstanceWrapper = wrapper;
        }
        this.registerCleaner(this.subscriberInstanceWrapper)
    }

    registerCleaner(ptr: long): void {
        this.cleaner = new Cleaner(ptr)
        destroyRegister.register(this, this.cleaner!, unregisterToken);
    }
}