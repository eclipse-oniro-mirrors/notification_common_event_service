# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/common_event_service/event.gni")
import("//build/test.gni")

module_output_path = "common_event_service/common_event_service/tools"

config("tools_cem_test_config") {
  include_dirs = [ "${tools_path}/cem/include" ]
}

ohos_systemtest("common_event_command_dump_system_test") {
  module_out_path = module_output_path

  sources = [ "common_event_command_dump_system_test.cpp" ]

  configs = [ ":tools_cem_test_config" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ces_core_path}:cesfwk_core",
    "${ces_native_path}:cesfwk_innerkits",
  ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_systemtest("common_event_command_publish_system_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "common_event_command_publish_system_test.cpp" ]

  configs = [ ":tools_cem_test_config" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ces_core_path}:cesfwk_core",
    "${ces_native_path}:cesfwk_innerkits",
  ]
  defines = []
  if (build_variant == "user") {
    defines += [ "CEM_BUILD_VARIANT_USER" ]
  }
  external_deps = [
    "ability_base:want",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson_static",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "selinux_adapter:librestorecon",
  ]
}

group("systemtest") {
  testonly = true

  deps = [
    ":common_event_command_dump_system_test",
    ":common_event_command_publish_system_test",
  ]
}
